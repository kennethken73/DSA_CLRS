* Project - Overview: DSA-CLRS
** Following CLRS book and sharing the experience on discord
** The Various Data Structures and Algorithms will be together on this one project
** Project - Current Status
Ground-work laid for creation and usage of algorithms, chosen at run-time.

Quickly following learncpp.com for the c++ refresher.

IntArray created as first Data Structure.

Now ready to implement the first Algorithm from CLRS: Insertion Sort.

*** Example Run:
#+begin_src elisp :exports both
  (shell-command-to-string projectile-project-run-cmd) 
#+end_src

#+RESULTS:
#+begin_example
Welcome to the DSA-runner
What Data Structure are we setting up?
Available Algorithms:
myAdd, myMult, 
arr[0] == 9
full array: 
arr[i]:  9
arr[i]:  8
arr[i]:  7
arr[i]:  6

and done..
#+end_example

*** Click on Algorithms(.org||.pdf) to view the work there.

*** Data Structures
The same format will follow in the near future.

** Project - Specifics
*** tree

#+begin_src elisp :exports results
  ;; https://www.baeldung.com/linux/insert-line-specific-line-number
  ;; report of the directory structure, showing the build directory, but not it's contents
  (shell-command "tree -a -o tree.txt -I 'build|.cache|.git|tree.txt|ltximg'")
  (shell-command "sed -i '2 i ├── build' tree.txt")
  (shell-command "echo 'Plus the build/ directory' >> tree.txt")
  (shell-command-to-string "cat -b tree.txt") 
#+end_src

#+RESULTS:
#+begin_example
     1	.
     2	├── build
     3	├── Algorithms.org
     4	├── Algorithms.pdf
     5	├── Code_Notes.org
     6	├── .dir-locals.el
     7	├── doc
     8	│   └── code_scraps.org
     9	├── .gitignore
    10	├── lib
    11	│   ├── myTimer.cpp
    12	│   ├── readme.txt
    13	│   └── skipHeaders
    14	├── .projectile
    15	├── README.md
    16	├── README.org
    17	├── src
    18	│   ├── CMakeLists.txt
    19	│   ├── DSA_CLRS.cpp
    20	│   └── include
    21	│       ├── myAlgo
    22	│       │   ├── CMakeLists.txt
    23	│       │   ├── myAdd.cpp
    24	│       │   ├── myAlgorithms.cpp
    25	│       │   ├── myAlgorithms.hpp
    26	│       │   ├── myInsertionSort.cpp
    27	│       │   └── myMult.cpp
    28	│       └── myDS
    29	│           ├── CMakeLists.txt
    30	│           ├── IntArray.cpp
    31	│           ├── myDataStructures.cpp
    32	│           └── myDataStructures.hpp
    33	└── test
    34	    ├── commandsGDB
    35	    └── gdbInput1.txt

    36	7 directories, 26 files
    37	Plus the build/ directory
#+end_example




*** how to build, compile, and run
This build system is integrated with spacemacs.
**** build/compile:
run (cmake-ide-compile) while in DSA-CLRS.cpp
I have (cmake-ide-compile) bound to =,cc=
**** run:
run (omen-c/cpp-project-run-interactive-executable) while in DSA-CLRS.cpp
I have (omen-c/cpp-project-run-interactive-executable) bound to =<Spc> ocr=


* Git Repo: DSA-CLRS
https://github.com/kennethken73/DSA_CLRS
Remember to export to markdown from README.org
* C++ Project - Main Features
** Emacs Development Environment
*** Magit
*** lsp-mode
*** DAP-mode debugging
*** org-mode
**** literate programming
**** org-export with pandoc and markdown integration
*** dir-locals configuration
*** projectile configuration
*** non-conflicting with installed emacs packages
*** TODO
+ get Doxygen set up
+ get clang-format set up
** CMake Build Management
*** TODO
+ get clean-target working
+ set up running an input file into the main executable
  + this will be our testing method
  + so, we'll need a cmake target which reads from /test
    
    
